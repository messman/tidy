A discussion on node / npm package resolution.

Scenario:
You are working on "Project A".
Project A has two dependencies: storybook and webpack.
Storybook, in turn, depends on a specific version of webpack.

Let's say Storybook (v6, not that it matters), specifically wants and only supports webpack 4.
But, the latest version (and the one you want to use outside of storybook) is webpack 5.

This will cause an issue. Consider two cases:

1. You have a plugin, like DefinePlugin, that exists on the version of webpack (like webpack.DefinePlugin(...)).
You can't easily access the webpack version that storybook is using in order to ensure that the older version of webpackDefinePlugin is used.
It requires use of the low-level node module API (require.resolve).

2. You have a plugin, like ts-loader, that works with any version of webpack, but you want it to use whatever version is being used for storybook or non-storybook.
Meaning, when using storybook, you want storybook's version of webpack (4) to be recognized by ts-loader.
Then, when not using storybook, you want ts-loader to use webpack 5.
This, unfortunately, is not possible. The resolution of a require (like ts-loader's resolution of 'require("webpack")'), is based on the location of ts-loader, not of its parent or the caller or storybook. You can't change that. 

This creates a problem for Tidy, because we want webpack 5. 

This also created an issue for react-common, because the top-level webpack version there is 4, not 5. So the ts-loader in tswb is 4 even though the webpack used there is 5. 